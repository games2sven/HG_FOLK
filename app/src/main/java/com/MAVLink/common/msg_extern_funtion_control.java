/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EXTERN_FUNTION_CONTROL PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* The formation mission control information.
*/
public class msg_extern_funtion_control extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL = 13;
    public static final int MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL_CRC = 187;
    public static final int MAVLINK_MSG_LENGTH = 19;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL;


      
    /**
    * Distance control of x, y, z. E.g: 10, 20, 30.
    */
    public float position[] = new float[3];
      
    /**
    * Yaw control. E.g: 30
    */
    public float yaw;
      
    /**
    * 0: idle. 2:request.
    */
    public short request;
      
    /**
    * 0:idle. 1. arm. 2. disarm. 3:takeoff. 4:land entry. 5.land exit. 6.delta distance control. 7.coordinate control. 8.yaw control. 10: throw fly. 11��one key circle entry. 12��one key circle exit. 13. 360 spin. 14. flip mode. 15. jump mode entry. 16. jump mode exit.
    */
    public short cmd;
      
    /**
    * 1: success. 2:fail.
    */
    public short result;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL;
//        packet.crc_extra = MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL_CRC;
              
        
        for (int i = 0; i < position.length; i++) {
            packet.payload.putFloat(position[i]);
        }
                    
              
        packet.payload.putFloat(yaw);
              
        packet.payload.putUnsignedByte(request);
              
        packet.payload.putUnsignedByte(cmd);
              
        packet.payload.putUnsignedByte(result);
        
        return packet;
    }

    /**
    * Decode a extern_funtion_control message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
         
        for (int i = 0; i < this.position.length; i++) {
            this.position[i] = payload.getFloat();
        }
                
              
        this.yaw = payload.getFloat();
              
        this.request = payload.getUnsignedByte();
              
        this.cmd = payload.getUnsignedByte();
              
        this.result = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_extern_funtion_control(){
        msgid = MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_extern_funtion_control(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL;
        unpack(mavLinkPacket.payload);
    }

              
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_EXTERN_FUNTION_CONTROL - sysid:"+sysid+" compid:"+compid+" position:"+position+" yaw:"+yaw+" request:"+request+" cmd:"+cmd+" result:"+result+"";
    }
}
        