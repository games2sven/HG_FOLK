/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

package com.MAVLink.common;

/**
 * X.25 CRC calculation for MAVlink messages. The checksum must be initialized,
 * updated with witch field of the message, and then finished with the message
 * id.
 */
public class CRC {
    public static final int[][] MAVLINK_MESSAGE_CRCS = {
            {13, 47}, /*0  */
            {31, 124}, /*1  */
            {12, 137}, /*2  */
            {0, 0}, /*3  */
            {14, 237}, /*4  */
            {28, 217}, /*5  */
            {3, 104}, /*6  */
            {32, 119}, /*7  */
            {0, 0}, /*8  */
            {0, 0}, /*9  */
            {0, 0}, /*10 */
            {6, 89}, /*11 */
            {42, 123}, /*12 */
            {19, 187}, /*13 */
            {0, 0}, /*14 */
            {0, 0}, /*15 */
            {0, 0}, /*16 */
            {0, 0}, /*17 */
            {0, 0}, /*18 */
            {0, 0}, /*19 */
            {20, 214}, /*20 */
            {2, 159}, /*21 */
            {25, 220}, /*22 */
            {23, 168}, /*23 */
            {30, 24}, /*24 */
            {101, 23}, /*25 */
            {22, 170}, /*26 */
            {26, 144}, /*27 */
            {16, 67}, /*28 */
            {14, 115}, /*29 */
            {28, 39}, /*30 */
            {32, 246}, /*31 */
            {36, 166}, /*32 */
            {28, 104}, /*33 */
            {22, 237}, /*34 */
            {22, 244}, /*35 */
            {21, 222}, /*36 */
            {6, 212}, /*37 */
            {6, 9}, /*38 */
            {37, 254}, /*39 */
            {4, 230}, /*40 */
            {4, 28}, /*41 */
            {2, 28}, /*42 */
            {2, 132}, /*43 */
            {4, 221}, /*44 */
            {2, 232}, /*45 */
            {2, 11}, /*46 */
            {3, 153}, /*47 */
            {13, 41}, /*48 */
            {12, 39}, /*49 */
            {37, 78}, /*50 */
            {0, 0}, /*51 */
            {0, 0}, /*52 */
            {0, 0}, /*53 */
            {27, 15}, /*54 */
            {25, 3}, /*55 */
            {176, 250}, /*56 */
            {174, 23}, /*57 */
            {0, 0}, /*58 */
            {0, 0}, /*59 */
            {0, 0}, /*60 */
            {68, 153}, /*61 */
            {26, 183}, /*62 */
            {185, 51}, /*63 */
            {229, 59}, /*64 */
            {42, 118}, /*65 */
            {6, 148}, /*66 */
            {4, 21}, /*67 */
            {0, 0}, /*68 */
            {11, 243}, /*69 */
            {18, 124}, /*70 */
            {0, 0}, /*71 */
            {0, 0}, /*72 */
            {37, 38}, /*73 */
            {20, 20}, /*74 */
            {35, 158}, /*75 */
            {33, 152}, /*76 */
            {3, 143}, /*77 */
            {0, 0}, /*78 */
            {0, 0}, /*79 */
            {0, 0}, /*80 */
            {22, 106}, /*81 */
            {39, 49}, /*82 */
            {37, 22}, /*83 */
            {53, 143}, /*84 */
            {51, 140}, /*85 */
            {53, 5}, /*86 */
            {51, 150}, /*87 */
            {0, 0}, /*88 */
            {28, 231}, /*89 */
            {56, 183}, /*90 */
            {42, 63}, /*91 */
            {33, 54}, /*92 */
            {0, 0}, /*93 */
            {0, 0}, /*94 */
            {0, 0}, /*95 */
            {0, 0}, /*96 */
            {0, 0}, /*97 */
            {0, 0}, /*98 */
            {12, 116}, /*99 */
            {26, 175}, /*100*/
            {32, 102}, /*101*/
            {32, 158}, /*102*/
            {20, 208}, /*103*/
            {32, 56}, /*104*/
            {62, 93}, /*105*/
            {44, 138}, /*106*/
            {64, 108}, /*107*/
            {84, 32}, /*108*/
            {9, 185}, /*109*/
            {131, 84}, /*110*/
            {16, 34}, /*111*/
            {12, 174}, /*112*/
            {36, 124}, /*113*/
            {44, 237}, /*114*/
            {64, 4}, /*115*/
            {22, 76}, /*116*/
            {6, 128}, /*117*/
            {14, 56}, /*118*/
            {12, 116}, /*119*/
            {97, 134}, /*120*/
            {2, 237}, /*121*/
            {2, 203}, /*122*/
            {113, 250}, /*123*/
            {35, 87}, /*124*/
            {6, 203}, /*125*/
            {79, 220}, /*126*/
            {35, 25}, /*127*/
            {35, 226}, /*128*/
            {22, 46}, /*129*/
            {13, 29}, /*130*/
            {255, 223}, /*131*/
            {14, 85}, /*132*/
            {18, 6}, /*133*/
            {43, 229}, /*134*/
            {8, 203}, /*135*/
            {22, 1}, /*136*/
            {14, 195}, /*137*/
            {36, 109}, /*138*/
            {43, 168}, /*139*/
            {41, 181}, /*140*/
            {24, 148}, /*141*/
            {243, 72}, /*142*/
            {14, 131}, /*143*/
            {93, 127}, /*144*/
            {0, 0}, /*145*/
            {100, 103}, /*146*/
            {36, 169}, /*147*/
            {48, 159}, /*148*/
            {30, 200}, /*149*/
            {0, 0}, /*150*/
            {11, 108}, /*151*/
            {52, 86}, /*152*/
            {1, 95}, /*153*/
            {92, 224}, /*154*/
            {0, 0}, /*155*/
            {0, 0}, /*156*/
            {0, 0}, /*157*/
            {0, 0}, /*158*/
            {0, 0}, /*159*/
            {18, 22}, /*160*/
            {0, 0}, /*161*/
            {0, 0}, /*162*/
            {0, 0}, /*163*/
            {0, 0}, /*164*/
            {0, 0}, /*165*/
            {0, 0}, /*166*/
            {0, 0}, /*167*/
            {0, 0}, /*168*/
            {0, 0}, /*169*/
            {18, 28}, /*170*/
            {26, 249}, /*171*/
            {16, 182}, /*172*/
            {5, 172}, /*173*/
            {61, 84}, /*174*/
            {26, 54}, /*175*/
            {63, 52}, /*176*/
            {254, 21}, /*177*/
            {97, 154}, /*178*/
            {99, 235}, /*179*/
            {4, 153}, /*180*/
            {255, 16}, /*181*/
            {12, 29}, /*182*/
            {6, 162}, /*183*/
            {26, 156}, /*184*/
            {252, 122}, /*185*/
            {36, 69}, /*186*/
            {0, 0}, /*187*/
            {0, 0}, /*188*/
            {0, 0}, /*189*/
            {106, 90}, /*190*/
            {43, 95}, /*191*/
            {55, 36}, /*192*/
            {0, 0}, /*193*/
            {0, 0}, /*194*/
            {53, 88}, /*195*/
            {0, 0}, /*196*/
            {0, 0}, /*197*/
            {0, 0}, /*198*/
            {0, 0}, /*199*/
            {21, 254}, /*200*/
            {0, 0}, /*201*/
            {0, 0}, /*202*/
            {0, 0}, /*203*/
            {0, 0}, /*204*/
            {48, 87}, /*205*/
            {39, 19}, /*206*/
            {84, 18}, /*207*/
            {21, 85}, /*208*/
            {9, 0}, /*209*/
            {20, 138}, /*210*/
            {7, 0}, /*211*/
            {0, 0}, /*212*/
            {0, 0}, /*213*/
            {0, 0}, /*214*/
            {0, 0}, /*215*/
            {0, 0}, /*216*/
            {0, 0}, /*217*/
            {0, 0}, /*218*/
            {0, 0}, /*219*/
            {0, 0}, /*220*/
            {0, 0}, /*221*/
            {0, 0}, /*222*/
            {0, 0}, /*223*/
            {0, 0}, /*224*/
            {0, 0}, /*225*/
            {0, 0}, /*226*/
            {0, 0}, /*227*/
            {0, 0}, /*228*/
            {0, 0}, /*229*/
            {0, 0}, /*230*/
            {0, 0}, /*231*/
            {0, 0}, /*232*/
            {0, 0}, /*233*/
            {0, 0}, /*234*/
            {0, 0}, /*235*/
            {0, 0}, /*236*/
            {0, 0}, /*237*/
            {0, 0}, /*238*/
            {0, 0}, /*239*/
            {0, 0}, /*240*/
            {32, 90}, /*241*/
            {52, 104}, /*242*/
            {53, 85}, /*243*/
            {6, 95}, /*244*/
            {2, 130}, /*245*/
            {0, 0}, /*246*/
            {0, 0}, /*247*/
            {254, 8}, /*248*/
            {36, 204}, /*249*/
            {30, 49}, /*250*/
            {18, 170}, /*251*/
            {18, 44}, /*252*/
            {55, 245}, /*253*/
            {9, 46}, /*254*/
            {0, 0}, /*255*/
    };
    private static final int CRC_INIT_VALUE = 0xffff;
    private int crcValue;

    /**
     * Accumulate the X.25 CRC by adding one char at a time.
     * <p>
     * The checksum function adds the hash of one char at a time to the 16 bit
     * checksum (uint16_t).
     *
     * @param data new char to hash
     **/
    public void update_checksum(int data) {
        data = data & 0xff; //cast because we want an unsigned type
        int tmp = data ^ (crcValue & 0xff);
        tmp ^= (tmp << 4) & 0xff;
        crcValue = ((crcValue >> 8) & 0xff) ^ (tmp << 8) ^ (tmp << 3) ^ ((tmp >> 4) & 0xf);
    }

    /**
     * Finish the CRC calculation of a message, by running the CRC with the
     * Magic Byte. This Magic byte has been defined in MAVlink v1.0.
     *
     * @param msgid The message id number
     */
    public void finish_checksum(int msgid) {
        update_checksum(MAVLINK_MESSAGE_CRCS[msgid][1]);
    }

    /**
     * Initialize the buffer for the X.25 CRC
     */
    public void start_checksum() {
        crcValue = CRC_INIT_VALUE;
    }

    public int getMSB() {
        return ((crcValue >> 8) & 0xff);
    }

    public int getLSB() {
        return (crcValue & 0xff);
    }

    public CRC() {
        start_checksum();
    }

}
        