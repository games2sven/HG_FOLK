/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE FIRMWARE_HEADS PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
* The firmware heads.
*/
public class msg_firmware_heads extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_FIRMWARE_HEADS = 184;
    public static final int MAVLINK_MSG_LENGTH = 26;
    private static final long serialVersionUID = MAVLINK_MSG_ID_FIRMWARE_HEADS;


      
    /**
    * The byte lenth of firmware. E.g: 10000.
    */
    public long lenth;
      
    /**
    * The serilal number of Aircraft. E.g: 13.
    */
    public int serial_num;
      
    /**
    * The version of firmware. E.g: V1.2.4.4.
    */
    public short version[] = new short[4];
      
    /**
    * The md5 of firmware.
    */
    public short md5[] = new short[16];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_FIRMWARE_HEADS;
              
        packet.payload.putUnsignedInt(lenth);
              
        packet.payload.putUnsignedShort(serial_num);
              
        
        for (int i = 0; i < version.length; i++) {
            packet.payload.putUnsignedByte(version[i]);
        }
                    
              
        
        for (int i = 0; i < md5.length; i++) {
            packet.payload.putUnsignedByte(md5[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a firmware_heads message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.lenth = payload.getUnsignedInt();
              
        this.serial_num = payload.getUnsignedShort();
              
         
        for (int i = 0; i < this.version.length; i++) {
            this.version[i] = payload.getUnsignedByte();
        }
                
              
         
        for (int i = 0; i < this.md5.length; i++) {
            this.md5[i] = payload.getUnsignedByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_firmware_heads(){
        msgid = MAVLINK_MSG_ID_FIRMWARE_HEADS;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_firmware_heads(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_FIRMWARE_HEADS;
        unpack(mavLinkPacket.payload);        
    }

            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_FIRMWARE_HEADS - sysid:"+sysid+" compid:"+compid+" lenth:"+lenth+" serial_num:"+serial_num+" version:"+version+" md5:"+md5+"";
    }
}
        