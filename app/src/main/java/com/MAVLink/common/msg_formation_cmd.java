/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE FORMATION_CMD PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
* 
*/
public class msg_formation_cmd extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_FORMATION_CMD = 208;
    public static final int MAVLINK_MSG_LENGTH = 21;
    private static final long serialVersionUID = MAVLINK_MSG_ID_FORMATION_CMD;


      
    /**
    * Unix Timestamp in milliseconds
    */
    public long utc;
      
    /**
    * Command token
    */
    public long token;
      
    /**
    * Data
    */
    public int data;
      
    /**
    * Data
    */
    public int start_id;
      
    /**
    * Data
    */
    public int end_id;
      
    /**
    * Command 1-Takeoff 2-Land 3-Prepare 4-Arm 5-Disarm 6-TimeSync 7-CalMag
    */
    public short cmd;
      
    /**
    * Ack 0-NoAck 1-Ack
    */
    public short ack;
      
    /**
    * Broadcast or point to point 0-Broadcast 1-Point to Point
    */
    public short type;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_FORMATION_CMD;
              
        packet.payload.putUnsignedLong(utc);
              
        packet.payload.putUnsignedInt(token);
              
        packet.payload.putUnsignedShort(data);
              
        packet.payload.putUnsignedShort(start_id);
              
        packet.payload.putUnsignedShort(end_id);
              
        packet.payload.putUnsignedByte(cmd);
              
        packet.payload.putUnsignedByte(ack);
              
        packet.payload.putUnsignedByte(type);
        
        return packet;
    }

    /**
    * Decode a formation_cmd message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.utc = payload.getUnsignedLong();
              
        this.token = payload.getUnsignedInt();
              
        this.data = payload.getUnsignedShort();
              
        this.start_id = payload.getUnsignedShort();
              
        this.end_id = payload.getUnsignedShort();
              
        this.cmd = payload.getUnsignedByte();
              
        this.ack = payload.getUnsignedByte();
              
        this.type = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_formation_cmd(){
        msgid = MAVLINK_MSG_ID_FORMATION_CMD;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_formation_cmd(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_FORMATION_CMD;
        unpack(mavLinkPacket.payload);        
    }

                    
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_FORMATION_CMD - sysid:"+sysid+" compid:"+compid+" utc:"+utc+" token:"+token+" data:"+data+" start_id:"+start_id+" end_id:"+end_id+" cmd:"+cmd+" ack:"+ack+" type:"+type+"";
    }
}
        