/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SETUP_AP PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Data for sensor mag.
*/
public class msg_setup_ap extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_SETUP_AP = 12;
    public static final int MAVLINK_MSG_ID_SETUP_AP_CRC = 123;
    public static final int MAVLINK_MSG_LENGTH = 42;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SETUP_AP;


      
    /**
    * 1: check connect status. 2: setup ap mode.
    */
    public short cmd;
      
    /**
    * AP ssid.
    */
    public short ssid[] = new short[20];
      
    /**
    * AP password.
    */
    public short psw[] = new short[20];
      
    /**
    * 1: success. 2:fail.
    */
    public short result;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_SETUP_AP;
//        packet.crc_extra = MAVLINK_MSG_ID_SETUP_AP_CRC;
              
        packet.payload.putUnsignedByte(cmd);
              
        
        for (int i = 0; i < ssid.length; i++) {
            packet.payload.putUnsignedByte(ssid[i]);
        }
                    
              
        
        for (int i = 0; i < psw.length; i++) {
            packet.payload.putUnsignedByte(psw[i]);
        }
                    
              
        packet.payload.putUnsignedByte(result);
        
        return packet;
    }

    /**
    * Decode a setup_ap message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.cmd = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.ssid.length; i++) {
            this.ssid[i] = payload.getUnsignedByte();
        }
                
              
         
        for (int i = 0; i < this.psw.length; i++) {
            this.psw[i] = payload.getUnsignedByte();
        }
                
              
        this.result = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_setup_ap(){
        msgid = MAVLINK_MSG_ID_SETUP_AP;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_setup_ap(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_SETUP_AP;
        unpack(mavLinkPacket.payload);
    }

            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_SETUP_AP - sysid:"+sysid+" compid:"+compid+" cmd:"+cmd+" ssid:"+ssid+" psw:"+psw+" result:"+result+"";
    }
}
        