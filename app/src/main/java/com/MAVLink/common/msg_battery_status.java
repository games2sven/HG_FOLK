package com.MAVLink.common;/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE BATTERY_STATUS PACKING

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
* Battery information
*/
public class msg_battery_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_BATTERY_STATUS = 147;
    public static final int MAVLINK_MSG_LENGTH = 36;
    private static final long serialVersionUID = MAVLINK_MSG_ID_BATTERY_STATUS;


      
    /**
    * Battery current mA
    */
    public int current;
      
    /**
    * Temperature of the battery in centi-degrees celsius. INT16_MAX for unknown temperature.
    */
    public short temperature;
      
    /**
    * Battery voltage of cells, in millivolts (1 = 1 millivolt). Cells above the valid cell count for this battery should have the UINT16_MAX value.
    */
    public int voltages[] = new int[6];
      
    /**
    * Full charge volume mAh
    */
    public int full_charged_volume;
      
    /**
    * Designed volume mAh
    */
    public int designed_volume;
      
    /**
    * Designed voltage mV
    */
    public int designed_voltage;
      
    /**
    * Battery voltage mV
    */
    public int voltage;
      
    /**
    * Charge cycle(days)
    */
    public int charge_cycle;
      
    /**
    * Flying time remaining estimated(second)
    */
    public int flying_time_remaining;
      
    /**
    * Battery ID
    */
    public short id;
      
    /**
    * Function of the battery
    */
    public short battery_function;
      
    /**
    * Type (chemistry) of the battery
    */
    public short type;
      
    /**
    * Remaining battery energy: (0%: 0, 100%: 100), -1: autopilot does not estimate the remaining battery
    */
    public byte battery_remaining;
      
    /**
    * Life percent: (0%: 0, 100%: 100)
    */
    public short life_percent;
      
    /**
    * Self discharge days(days)
    */
    public short self_discharge_days;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_BATTERY_STATUS;
              
        packet.payload.putInt(current);
              
        packet.payload.putShort(temperature);
              
        
        for (int i = 0; i < voltages.length; i++) {
            packet.payload.putUnsignedShort(voltages[i]);
        }
                    
              
        packet.payload.putUnsignedShort(full_charged_volume);
              
        packet.payload.putUnsignedShort(designed_volume);
              
        packet.payload.putUnsignedShort(designed_voltage);
              
        packet.payload.putUnsignedShort(voltage);
              
        packet.payload.putUnsignedShort(charge_cycle);
              
        packet.payload.putUnsignedShort(flying_time_remaining);
              
        packet.payload.putUnsignedByte(id);
              
        packet.payload.putUnsignedByte(battery_function);
              
        packet.payload.putUnsignedByte(type);
              
        packet.payload.putByte(battery_remaining);
              
        packet.payload.putUnsignedByte(life_percent);
              
        packet.payload.putUnsignedByte(self_discharge_days);
        
        return packet;
    }

    /**
    * Decode a battery_status message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.current = payload.getInt();
              
        this.temperature = payload.getShort();
              
         
        for (int i = 0; i < this.voltages.length; i++) {
            this.voltages[i] = payload.getUnsignedShort();
        }
                
              
        this.full_charged_volume = payload.getUnsignedShort();
              
        this.designed_volume = payload.getUnsignedShort();
              
        this.designed_voltage = payload.getUnsignedShort();
              
        this.voltage = payload.getUnsignedShort();
              
        this.charge_cycle = payload.getUnsignedShort();
              
        this.flying_time_remaining = payload.getUnsignedShort();
              
        this.id = payload.getUnsignedByte();
              
        this.battery_function = payload.getUnsignedByte();
              
        this.type = payload.getUnsignedByte();
              
        this.battery_remaining = payload.getByte();
              
        this.life_percent = payload.getUnsignedByte();
              
        this.self_discharge_days = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_battery_status(){
        msgid = MAVLINK_MSG_ID_BATTERY_STATUS;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_battery_status(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_BATTERY_STATUS;
        unpack(mavLinkPacket.payload);        
    }

                                  
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_BATTERY_STATUS -"+" current:"+current+" temperature:"+temperature+" voltages:"+voltages+" full_charged_volume:"+full_charged_volume+" designed_volume:"+designed_volume+" designed_voltage:"+designed_voltage+" voltage:"+voltage+" charge_cycle:"+charge_cycle+" flying_time_remaining:"+flying_time_remaining+" id:"+id+" battery_function:"+battery_function+" type:"+type+" battery_remaining:"+battery_remaining+" life_percent:"+life_percent+" self_discharge_days:"+self_discharge_days+"";
    }
}
        